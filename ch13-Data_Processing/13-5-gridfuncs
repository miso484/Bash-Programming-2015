
# Listing 13-5a. initgrid, Create a Grid and Fill It

initgrid() #@ Fill N x N grid with a character
{           #@ USAGE: initgrid gridname size [character]
  ## If a parameter is missing, it's a programming error, so exit
  local grid gridname=${1:?} char=${3:- } size

  export gridsize=${2:?}                    ## set gridsize globally
  size=$(( $gridsize ** 2 ))                ## total number of characters in grid
  printf -v grid "%$size.${size}s" " "      ## print string of spaces to variable
  eval "$gridname=\${grid// /"$char"}"      ## replace spaces with desired character
}


# Listing 13-5b. gridindex, Calculate Index from Row and Column

gridindex() #@ Store row/column's index into string in var or $_gridindex
{           #@ USAGE: gridindex row column [gridsize] [var]]
  local row=${1:?} col=${2:?}

  ## If gridsize argument is not given, take it from definition in calling script
  local gridsize=${3:-$gridsize}
  printf -v "${4:-_GRIDINDEX}" "%d" "$(( ($row - 1) * $gridsize + $col - 1))"
}


# Listing 13-5c. putgrid, Insert Character in Grid at Specified Row and Column

putgrid() #@ Insert character int grid at row and column
{          #@ USAGE: putgrid gridname row column char
  local gridname=$1            ## grid variable name
  local left right             ## string to left and right of character to be changed
  local index                  ## result from gridindex function
  local char=${4:?}            ## character to place in grid
  local grid=${!gridname} ## get grid string though indirection

  gridindex ${2:?} ${3:?} "$gridsize" index
  left=${grid:0:index}
  right=${grid:index+1}
  grid=$left$4$right
  eval "$gridname=\$grid"
}


# Listing 13-5d. getgrid, Get Character at Row and Column Location in Grid

getgrid() #@ Get character from grid in row Y, column X
{          #@ USAGE: getgrid gridname row column var
  : ${1:?} ${2:?} ${3:?} ${4:?}
  local grid=${!1}
  gridindex "$2" "$3"
  eval "$4=\${grid:_GRIDINDEX:1}"
}


# Listing 13-5e. showgrid, Print a Grid from a String

showgrid() #@ print grid in rows to stdout
{           #@ USAGE: showgrid gridname [gridsize]
  local grid=${!1:?} gridsize=${2:-$gridsize}
  local row      ## the row to be printed, then removed from local copy of grid
  while [ -n "$grid" ] ## loop until there's nothing left
  do
     row=${grid:0:"$gridsize"}         ## get first $gridsize characters from grid
     printf "\t:%s:\n" "$row"          ## print the row
     grid=${grid#"$row"}               ## remove $row from front of grid
  done
}


# Listing 13-5f. rshowgrid, Print a Grid in Reverse Order

rshowgrid() #@ print grid to stdout in reverse order
{            #@ USAGE: rshowgrid grid [gridsize]
  local grid gridsize=${2:-$gridsize} row
  grid=${!1:?}
  while [ -n "$grid" ]
  do
     ## Note space before minus sign
     ## to distinguish it from default value substitution
     row=${grid: -$gridsize}      ## get last row from grid
     printf "\t:%s:\n" "$row" ## print it
     grid=${grid%"$row"}          ## remove it
  done
}

