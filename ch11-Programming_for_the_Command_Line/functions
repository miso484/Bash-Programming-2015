

# Listing 11-1. cd, Change Directory, Saving Location on the Directory Stack

cd() #@ Change directory, storing new directory on DIRSTACK
{
  local dir error             ## variables for directory and return code
  while :                     ## ignore all options
  do
     case $1 in
       --) break ;;
       -*) shift ;;
       *) break ;;
     esac
  done
  dir=$1
  if [ -n "$dir" ]          ## if a $dir is not empty
  then
     pushd "$dir"           ## change directory
  else
     pushd "$HOME"          ## go HOME if nothing on the command line
  fi 2>/dev/null            ## error message should come from cd, not pushd
  error=$?      ## store pushd's exit code
  if [ $error -ne 0 ]       ## failed, print error message
  then
     builtin cd "$dir"      ## let the builtin cd provide the error message
  fi
  return "$error"           ## leave with pushd's exit code
} > /dev/null


# Listing 11-2. pd, Return to Previous Directory with popd

pd ()
{
    popd
} >/dev/null ### for the same reason as cd


# Listing 11-3. cdm, Select New Directory from a Menu of Those Already Visited

cdm() #@ select new directory from a menu      of those already visited
{
  local dir IFS=$'\n' item

  for dir in $(dirs -l -p)                  ## loop through diretories in DIRSTACK[@]
  do
     [ "$dir" = "$PWD" ] && continue        ## skip current directory
     case ${item[*]} in
       *"$dir:"*) ;;                        ## $dir already in array; do nothing
       *) item+=( "$dir:cd '$dir'" ) ;; ##     add $dir to array
     esac
  done

  menu "${item[@]}" Quit:                   ## pass array to menu function
}


# Listing 11-4. menu, Print Menu and Execute Associated Command
menu()
{
  local IFS=$' \t\n'                            ## Use default setting of IFS
  local num n=1 opt item cmd
  echo

  ## Loop though the command-line arguments
  for item
  do
     printf " %3d. %s\n" "$n" "${item%%:*}"
     n=$(( $n + 1 ))
  done
  echo

  ## If there are fewer than 10 items, set option to accept key without ENTER
  if [ $# -lt 10 ]
  then
     opt=-sn1
  else
     opt=
  fi

  read -p " (1 to $#) ==> " $opt num          ## Get response from user

  ## Check that user entry is valid
  case $num in
     [qQ0] | "" ) return ;;                   ## q, Q or 0 or "" exits
     *[!0-9]* | 0*)                           ## invalid entry
        printf "\aInvalid response: %s\n" "$num" >&2
        return 1
        ;;
  esac
  echo

  if [ "$num" -le "$#" ]    ## Check that number is <= to the number of menu items
  then
     eval "${!num#*:}"      ## Execute it using indirect expansion
  else
     printf "\aInvalid response: %s\n" "$num" >&2
     return 1
  fi
}


# Listing 11-5. l, List Files in Long Format, Piped Through less

l()
{
  ls -lA "$@" | less              ## the -A option is specific to GNU and *BSD versions
}


# Listing 11-6. lsr, List Most Recently Modified Files

num=10                                                 ## number of files to print
short=0                                                ## set to 1 for short listing
timestyle='--time-style="+ %d-%b-%Y %H:%M:%S "'        ## GNU-specific time format

opts=Aadn:os

while getopts $opts opt
do
   case $opt in
        a|A|d) ls_opts="$ls_opts -$opt" ;;      ## options passed to ls
        n) num=$OPTARG ;;                       ## number of files to display
        o) ls_opts="$ls_opts -r" ;;             ## show oldest files, not newest
        s) short=$(( $short + 1 )) ;;
   esac
done
shift $(( $OPTIND - 1 ))

case $short in
     0) ls_opts="$ls_opts -l -t" ;;              ## long listing, use -l
     *) ls_opts="$ls_opts -t" ;;                 ## short listing, do not use -l
esac

ls $ls_opts $timestyle "$@" | {
     read                                 ## In bash, the same as: IFS= read -r REPLY
     case $line in
          total*) ;;                      ## do not display the 'total' line
          *) printf "%s\n" "$REPLY" ;;
     esac
     cat
} | head -n$num


# Listing 11-7. cp, Copy, Using the Current Directory If No Destination Is Given

cp()
{
  local final

  if [ $# -eq 1 ]                      ## Only one arg,
  then
     command cp -b "$1" .              ## so copy it to the current directory
  else
     final=${!#}
     if [ -d "$final" ]                   ## if last arg is a directory
     then
        command cp -b "$@"                ## copy all the files into it
     else
        command cp -b "$@" .              ## otherwise, copy to the current directory
     fi
  fi
}


# Listing 11-8. md, Create a New Directory and Intermediate Directories and Optionally cd into It

md() { #@ create new directory, including intermediate directories if necessary
  case $1 in
      -c) mkdir -p "$2" && cd "$2" ;;
      *) mkdir -p "$@" ;;
  esac
}


# Listing 11-9. pr1, Function to Print Its Arguments One to a Line

pr1() #@ Print arguments one to a line
{
  case $1 in
    -w) pr_w=                   ## width specification modifier
        shift
        ;;
    -W) pr_w=${2}
        shift 2
        ;;
    -W*) pr_w=${1#??}
          shift
          ;;
    *) pr_w=-.${COLUMNS:-80}    ## default to number of columns in window
       ;;
  esac
  printf "%${pr_w}s\n" "$@"
}


# Listing 11-12. sman, Call Up a Man Page and Search for a Pattern

sman() #@ USAGE: sman command search_pattern
{
  LESS="$LESS${2:+ +/$2}" man "$1"
}


# Listing 11-13. sus, Look Up a Man Page in the POSIX Spec

sus()
{
     local html_file=/usr/share/sus/$1.html       ## adjust to taste
     local dir=9699919799
     local sus_dir=http://www.opengroup.org/onlinepubs/$dir/utilities/
     [ -f "$html_file" ] ||
       lynx -source $sus_dir${1##*/}.html > $html_file ##>/dev/null 2>&1
     lynx -dump -nolist $html_file | ${PAGER:-less}
}

# Listing 11-14. k, List Commands Whose Short Descriptions Include a Search String

k() #@ USAGE: k string
{
     man -k "$@" | grep '(1'
}


