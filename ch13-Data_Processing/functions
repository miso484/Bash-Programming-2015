
# Listing 13-1. lettersort, Sort Letters in a Word Alphabetically

lettersort() #@ Sort letters in $1, store in $2
{
  local letter string
  declare -A letters
  string=${1:?}

  while [ -n "$string" ]
  do
     letter=${string:0:1}
     letters["$letter"]=${letters["$letter"]}$letter
     string=${string#?}
  done

  printf -v "${2:-_LETTERSORT}" "%s" "${letters[@]}"

}


# Listing 13-2. isort, Sort Command-Line Arguments

isort()
{
  local -a a
  a=( "$1" ) ## put first argument in array for initial comparison
  shift         ## remove first argument

  for e         ## for each of the remaining arguments...
  do
     if [ "$e" \< "${a[0]}" ]                  ## does it precede the first element?
     then
        a=( "$e" "${a[@]}" )                   ## if yes, put it first
     elif [ "$e" \> "${a[${#a[@]}-1]}" ]       ## if no, does it go at the end?
     then
        a=( "${a[@]}" "$e" )                   ## if yes, put it at the end
     else                                      ## otherwise,
        n=0
        while [ "${a[$n]}" \< "$e" ]           ## find where it goes
        do
           n=$(( $n + 1 ))
        done
        a=( "${a[@]:0:n}" "$e" "${a[@]:n}" ) ## and put it there
     fi
  done

  printf "%s\n" "${a[@]}"
}


# Listing 13-3. asearch, Search Elements of an Array for a String

asearch() #@ Search for substring in array; results in array _asearch_elements
{          #@ USAGE: asearch arrayname string
  local arrayname=$1 substring=$2 array
  eval "array=( \"\${$arrayname[@]}\" )"

  case ${array[*]} in
     *"$substring"*) ;;    ## it's there; drop through
     *) return 1 ;;        ## not there; return error
  esac

  unset _asearch_elements
  for subscript in "${!array[@]}"
  do
     case ${array[$subscript]} in
       *"$substring"*)
                 _asearch_elements+=( "${array[$subscript]}" )
                 ;;
     esac
  done
}


# Listing 13-4. getlines, Store a Range of Lines from a File in an Array

if [ "${BASH_VERSINFO[0]}" -ge 4 ]
then
  getlines() #@ USAGE: getlines file start num arrayname
  {
     mapfile -t -s$(( $2 - 1 )) -n ${3:?} "$4" < "$1"
  }
else
  getlines() #@ USAGE: getlines file start num arrayname
   {
     local IFS=$'\n' getlinearray arrayname=${4:?}
     getlinearray=( $(sed -n "$2,$(( $2 - 1 + $3 )) p" "$1") )
     eval "$arrayname=( \"\${getlinearray[@]}\" )"
   }
fi

